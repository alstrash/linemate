{"name":"Linemate","tagline":"Render canvas lines between DOM nodes with ease.","body":"## :dancers: linemate.js\r\n\r\nRender canvas lines between DOM nodes with ease.\r\n\r\n### Installation\r\n\r\nInstall linemate with npm:\r\n\r\n    npm install --save linemate\r\n\r\nNo `npm`? Grab `linemate.min.js` from `dist/` and include it in your project.\r\nNo dependencies are needed, and `linemate` is made global.\r\n\r\n### Usage\r\n\r\nUse linemate to render canvas lines between DOM nodes.\r\n\r\n#### Example\r\n\r\nConnect three `div` elements with red, dashed lines.\r\n(Note that the options object is—as one might guess—**optional**. Defaults\r\nare detailed below.)\r\n\r\nProvide elements to connect:\r\n\r\n```html\r\n<div id=\"a\" class=\"node\"></div>\r\n<div id=\"b\" class=\"node\"></div>\r\n<div id=\"c\" class=\"node\"></div>\r\n```\r\n\r\nUse `linemate.connect` to add lines between the elements.\r\n```js\r\nwindow.addEventListener('load', function(e) {\r\n  // Render some canvas lines!\r\n  linemate.connect('.node', {\r\n    color: '#ff3300',\r\n    dashed: true,\r\n    width: 10\r\n  });\r\n});\r\n```\r\n\r\n#### linemate.connect\r\n\r\nConnect nodes such that the last node **is not** connected back to the first node.\r\n\r\n```js\r\n/*\r\n * Connect two or more DOM nodes without completeness.\r\n *\r\n * @param {Array[Node]|string} nodes - Array of two or more DOM nodes or a selector\r\n * @param {object} opts - An options object\r\n */\r\nfunction connect(nodes, opts = {}) {\r\n  // ...\r\n}\r\n```\r\n\r\n#### linemate.complete\r\n\r\nConnect nodes such that the last node **is** connected back to the first node.\r\n\r\n```js\r\n/*\r\n * Connect two or more DOM nodes with completeness.\r\n *\r\n * @param {Array[Node]|string} nodes - Array of two or more DOM nodes or a selector\r\n * @param {object} opts - An options object\r\n */\r\nfunction complete(nodes, opts = {}) {\r\n  // ...\r\n}\r\n```\r\n\r\n#### linemate.custom\r\n\r\nConnect nodes with your own custom algorithm.\r\n\r\n```js\r\n/*\r\n * Connect two or more DOM nodes with a custom\r\n * stroke algorithm.\r\n *\r\n * @param {Array[Node]|string} nodes - Array of two or more DOM nodes or a selector\r\n * @param {object} opts - An options object\r\n * @param {function} doStrokes - Custom stroke algorithm callback\r\n */\r\nfunction custom(nodes, opts = {}, doStrokes) {\r\n  // ...\r\n}\r\n```\r\n\r\n##### Custom Example\r\n\r\nIn the custom stroke algorithm callback, we have access to both the canvas\r\n`context` and the `pnodes` collection. The `pnodes` collection consists of\r\nobjects with an `entryPoint` and `exitPoint`—these are canvas coordinates for\r\neach node derived from the `entryPoint` and `exitPoint` options. Each point has\r\nan `x` and a `y` property.\r\n\r\nIn this example, we simply draw a wide pink line from the top left of the\r\ncanvas (0, 0) to each node entry point.\r\n\r\n```js\r\nlinemate.custom('.node', {\r\n  color: 'pink',\r\n  width: 30\r\n}, function(context, pnodes) {\r\n  context.moveTo(0, 0);\r\n\r\n  for(var i = 0, l = pnodes.length; i < l; i++) {\r\n    var pnode = pnodes[i];\r\n\r\n    context.lineTo(pnode.entryPoint.x, pnode.entryPoint.y);\r\n    context.moveTo(0, 0);\r\n  }\r\n});\r\n```\r\n\r\n### Options\r\n\r\nThe options object can be used to modify canvas line styles, node entry and exit points, etc.\r\n\r\n| Option          | Description                   | Default\r\n|-----------------|-------------------------------|---------------------------\r\n| cap             | [CanvasRenderingContext2D.lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) | 'round'\r\n| color           | [CanvasRenderingContext2D.strokeStyle](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle) | '#000'\r\n| dashed          | [CanvasRenderingContext2D.setLineDash()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash) | false\r\n| dashOffset      | [CanvasRenderingContext2D.lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) | 0\r\n| dashSegments    | [CanvasRenderingContext2D.setLineDash()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash) segments | [5, 15]\r\n| entryPoint      | The location at which each node is entered by an incoming line (valid values outlined below) | 'center'\r\n| exitPoint       | The location at which each node is exited by an outgoing line (valid values outlined below) | 'center'\r\n| join            | [CanvasRenderingContext2D.lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) | 'round'\r\n| miterLimit      | [CanvasRenderingContext2D.miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) | 10\r\n| width           | [CanvasRenderingContext2D.lineWidth](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth) | 1\r\n\r\nValid values for `entryPoint` and `exitPoint` options include the following:\r\n\r\n- 'center'\r\n- 'topLeft'\r\n- 'top'\r\n- 'topRight'\r\n- 'right'\r\n- 'bottomRight'\r\n- 'bottom'\r\n- 'bottomLeft'\r\n- 'left'\r\n\r\n### License\r\n\r\nCopyright (c) 2015 Travis Loncar.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}